### Starting build.
# Target: utils.mli.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:mli, file:utils.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules utils.mli > utils.mli.depends # cached
# Target: utils.cmi, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:mli, file:utils.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o utils.cmi utils.mli # cached
# Target: utils.ml.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:ml, file:utils.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules utils.ml > utils.ml.depends # cached
# Target: statistics.mli.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:mli, file:statistics.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules statistics.mli > statistics.mli.depends # cached
# Target: statistics.cmi, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:mli, file:statistics.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o statistics.cmi statistics.mli # cached
# Target: utils.cmo, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:cmo, extension:ml, file:utils.cmo, file:utils.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o utils.cmo utils.ml # cached
# Target: statistics.ml.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:ml, file:statistics.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules statistics.ml > statistics.ml.depends # cached
# Target: statistics.cmo, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:cmo, extension:ml, file:statistics.cmo, file:statistics.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o statistics.cmo statistics.ml # cached
# Target: matrix.mli.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:mli, file:matrix.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules matrix.mli > matrix.mli.depends # cached
# Target: matrix.cmi, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:mli, file:matrix.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o matrix.cmi matrix.mli # cached
# Target: matrix.ml.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:ml, file:matrix.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules matrix.ml > matrix.ml.depends # cached
# Target: matrix.cmo, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:cmo, extension:ml, file:matrix.cmo, file:matrix.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o matrix.cmo matrix.ml # cached
# Target: dataframe.mli.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:mli, file:dataframe.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules dataframe.mli > dataframe.mli.depends # cached
# Target: dataframe.cmi, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:mli, file:dataframe.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o dataframe.cmi dataframe.mli # cached
# Target: dataframe.ml.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:ml, file:dataframe.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules dataframe.ml > dataframe.ml.depends # cached
# Target: dataframe.cmo, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:cmo, extension:ml, file:dataframe.cmo, file:dataframe.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o dataframe.cmo dataframe.ml # cached
# Target: polynomial_regression.mli.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:mli, file:polynomial_regression.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules polynomial_regression.mli > polynomial_regression.mli.depends # cached
# Target: polynomial_regression.cmi, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:mli, file:polynomial_regression.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o polynomial_regression.cmi polynomial_regression.mli # cached
# Target: polynomial_regression.ml.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:ml, file:polynomial_regression.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules polynomial_regression.ml > polynomial_regression.ml.depends # cached
# Target: polynomial_regression.cmo, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:cmo, extension:ml, file:polynomial_regression.cmo, file:polynomial_regression.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o polynomial_regression.cmo polynomial_regression.ml # cached
# Target: logistic_regression.mli.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:mli, file:logistic_regression.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules logistic_regression.mli > logistic_regression.mli.depends # cached
# Target: logistic_regression.cmi, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:mli, file:logistic_regression.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o logistic_regression.cmi logistic_regression.mli # cached
# Target: logistic_regression.ml.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:ml, file:logistic_regression.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules logistic_regression.ml > logistic_regression.ml.depends # cached
# Target: logistic_regression.cmo, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:cmo, extension:ml, file:logistic_regression.cmo, file:logistic_regression.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o logistic_regression.cmo logistic_regression.ml # cached
# Target: knn.mli.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:mli, file:knn.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules knn.mli > knn.mli.depends # cached
# Target: knn.cmi, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:mli, file:knn.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o knn.cmi knn.mli # cached
# Target: knn.ml.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:ml, file:knn.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules knn.ml > knn.ml.depends # cached
# Target: knn.cmo, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:cmo, extension:ml, file:knn.cmo, file:knn.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o knn.cmo knn.ml # cached
# Target: k_means.mli.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:mli, file:k_means.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules k_means.mli > k_means.mli.depends # cached
# Target: k_means.cmi, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:mli, file:k_means.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o k_means.cmi k_means.mli # cached
# Target: k_means.ml.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:ml, file:k_means.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules k_means.ml > k_means.ml.depends # cached
# Target: k_means.cmo, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:cmo, extension:ml, file:k_means.cmo, file:k_means.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o k_means.cmo k_means.ml # cached
# Target: naive_bayes.mli.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:mli, file:naive_bayes.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules naive_bayes.mli > naive_bayes.mli.depends # cached
# Target: naive_bayes.cmi, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:mli, file:naive_bayes.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o naive_bayes.cmi naive_bayes.mli # cached
# Target: naive_bayes.ml.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:ml, file:naive_bayes.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules naive_bayes.ml > naive_bayes.ml.depends # cached
# Target: naive_bayes.cmo, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:cmo, extension:ml, file:naive_bayes.cmo, file:naive_bayes.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o naive_bayes.cmo naive_bayes.ml # cached
# Target: decision_tree.mli.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:mli, file:decision_tree.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules decision_tree.mli > decision_tree.mli.depends # cached
# Target: decision_tree.cmi, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:mli, file:decision_tree.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o decision_tree.cmi decision_tree.mli # cached
# Target: decision_tree.ml.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:ml, file:decision_tree.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules decision_tree.ml > decision_tree.ml.depends # cached
# Target: decision_tree.cmo, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:cmo, extension:ml, file:decision_tree.cmo, file:decision_tree.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o decision_tree.cmo decision_tree.ml # cached
# Target: perceptron.mli.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:mli, file:perceptron.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules perceptron.mli > perceptron.mli.depends
# Target: perceptron.cmi, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:mli, file:perceptron.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o perceptron.cmi perceptron.mli
# Target: perceptron.ml.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:ml, file:perceptron.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules perceptron.ml > perceptron.ml.depends # cached
# Target: perceptron.cmo, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:cmo, extension:ml, file:perceptron.cmo, file:perceptron.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o perceptron.cmo perceptron.ml
# Target: authors.mli.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:mli, file:authors.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules authors.mli > authors.mli.depends # cached
# Target: authors.cmi, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:mli, file:authors.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o authors.cmi authors.mli # cached
# Target: authors.ml.depends, tags: { package(ANSITerminal), package(csv), package(ounit2), extension:ml, file:authors.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package csv -package ANSITerminal -modules authors.ml > authors.ml.depends # cached
# Target: authors.cmo, tags: { package(ANSITerminal), package(csv), package(ounit2), byte, compile, extension:cmo, extension:ml, file:authors.cmo, file:authors.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package csv -package ANSITerminal -o authors.cmo authors.ml # cached
# Compilation successful.
